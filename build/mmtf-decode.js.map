{"version":3,"file":"mmtf-decode.js","sources":["msgpack-decode.js","mmtf-decode.js"],"sourcesContent":["\n// TODO license and attribution\n\n\nexport default function decodeMsgpack(buffer) {\n  var offset = 0;\n  var dataView = new DataView(buffer.buffer);\n\n  function map(length) {\n    var value = {};\n    for (var i = 0; i < length; i++) {\n      var key = parse();\n      value[key] = parse();\n    }\n    return value;\n  }\n\n  function bin(length) {\n    var value = buffer.subarray(offset, offset + length);\n    offset += length;\n    return value;\n  }\n\n  function str(length) {\n    var subarray = buffer.subarray(offset, offset + length);\n    var value = String.fromCharCode.apply(null, subarray);\n    offset += length;\n    return value;\n  }\n\n  function array(length) {\n    var value = new Array(length);\n    for (var i = 0; i < length; i++) {\n      value[i] = parse();\n    }\n    return value;\n  }\n\n  function parse() {\n    var type = buffer[offset];\n    var value, length, extType;\n    // Positive FixInt\n    if ((type & 0x80) === 0x00) {\n      offset++;\n      return type;\n    }\n    // FixMap\n    if ((type & 0xf0) === 0x80) {\n      length = type & 0x0f;\n      offset++;\n      return map(length);\n    }\n    // FixArray\n    if ((type & 0xf0) === 0x90) {\n      length = type & 0x0f;\n      offset++;\n      return array(length);\n    }\n    // FixStr\n    if ((type & 0xe0) === 0xa0) {\n      length = type & 0x1f;\n      offset++;\n      return str(length);\n    }\n    // Negative FixInt\n    if ((type & 0xe0) === 0xe0) {\n      value = dataView.getInt8(offset);\n      offset++;\n      return value;\n    }\n    switch (type) {\n    // nil\n    case 0xc0:\n      offset++;\n      return null;\n    // 0xc1: (never used)\n    // false\n    case 0xc2:\n      offset++;\n      return false;\n    // true\n    case 0xc3:\n      offset++;\n      return true;\n    // bin 8\n    case 0xc4:\n      length = dataView.getUint8(offset + 1);\n      offset += 2;\n      return bin(length);\n    // bin 16\n    case 0xc5:\n      length = dataView.getUint16(offset + 1);\n      offset += 3;\n      return bin(length);\n    // bin 32\n    case 0xc6:\n      length = dataView.getUint32(offset + 1);\n      offset += 5;\n      return bin(length);\n    // ext 8\n    case 0xc7:\n      length = dataView.getUint8(offset + 1);\n      extType = dataView.getUint8(offset + 2);\n      offset += 3;\n      return [extType, bin(length)];\n    // ext 16\n    case 0xc8:\n      length = dataView.getUint16(offset + 1);\n      extType = dataView.getUint8(offset + 3);\n      offset += 4;\n      return [extType, bin(length)];\n    // ext 32\n    case 0xc9:\n      length = dataView.getUint32(offset + 1);\n      extType = dataView.getUint8(offset + 5);\n      offset += 6;\n      return [extType, bin(length)];\n    // float 32\n    case 0xca:\n      value = dataView.getFloat32(offset + 1);\n      offset += 5;\n      return value;\n    // float 64\n    case 0xcb:\n      value = dataView.getFloat64(offset + 1);\n      offset += 9;\n      return value;\n    // uint8\n    case 0xcc:\n      value = buffer[offset + 1];\n      offset += 2;\n      return value;\n    // uint 16\n    case 0xcd:\n      value = dataView.getUint16(offset + 1);\n      offset += 3;\n      return value;\n    // uint 32\n    case 0xce:\n      value = dataView.getUint32(offset + 1);\n      offset += 5;\n      return value;\n    // uint64\n    case 0xcf:\n      // FIXME not available/representable in JS\n      // largest possible int in JS is 2^53\n      // value = dataView.getUint64(offset + 1);\n      offset += 9;\n      return 0;\n    // int 8\n    case 0xd0:\n      value = dataView.getInt8(offset + 1);\n      offset += 2;\n      return value;\n    // int 16\n    case 0xd1:\n      value = dataView.getInt16(offset + 1);\n      offset += 3;\n      return value;\n    // int 32\n    case 0xd2:\n      value = dataView.getInt32(offset + 1);\n      offset += 5;\n      return value;\n    // int 64\n    case 0xd3:\n      // FIXME not available/representable in JS\n      // largest possible int in JS is 2^53\n      // value = dataView.getInt64(offset + 1);\n      offset += 9;\n      return 0;\n\n    // fixext 1\n    case 0xd4:\n      extType = dataView.getUint8(offset + 1);\n      offset += 2;\n      return [extType, bin(1)];\n    // fixext 2\n    case 0xd5:\n      extType = dataView.getUint8(offset + 1);\n      offset += 2;\n      return [extType, bin(2)];\n    // fixext 4\n    case 0xd6:\n      extType = dataView.getUint8(offset + 1);\n      offset += 2;\n      return [extType, bin(4)];\n    // fixext 8\n    case 0xd7:\n      extType = dataView.getUint8(offset + 1);\n      offset += 2;\n      return [extType, bin(8)];\n    // fixext 16\n    case 0xd8:\n      extType = dataView.getUint8(offset + 1);\n      offset += 2;\n      return [extType, bin(16)];\n    // str 8\n    case 0xd9:\n      length = dataView.getUint8(offset + 1);\n      offset += 2;\n      return str(length);\n    // str 16\n    case 0xda:\n      length = dataView.getUint16(offset + 1);\n      offset += 3;\n      return str(length);\n    // str 32\n    case 0xdb:\n      length = dataView.getUint32(offset + 1);\n      offset += 5;\n      return str(length);\n    // array 16\n    case 0xdc:\n      length = dataView.getUint16(offset + 1);\n      offset += 3;\n      return array(length);\n    // array 32\n    case 0xdd:\n      length = dataView.getUint32(offset + 1);\n      offset += 5;\n      return array(length);\n    // map 16:\n    case 0xde:\n      length = dataView.getUint16(offset + 1);\n      offset += 3;\n      return map(length);\n    // map 32\n    case 0xdf:\n      length = dataView.getUint32(offset + 1);\n      offset += 5;\n      return map(length);\n    }\n\n    throw new Error(\"Unknown type 0x\" + type.toString(16));\n  }\n\n  return parse();\n}\n","\nimport decodeMsgpack from \"./msgpack-decode.js\";\n\n\nfunction getInt8( view, dataArray ){\n    var dv = new DataView( view.buffer );\n    var o = view.byteOffset;\n    var n = view.byteLength;\n    if( !dataArray ) dataArray = new Int8Array( n );\n    for( var i = 0; i < n; ++i ){\n        dataArray[ i ] = dv.getInt8( o+i );\n    }\n    return dataArray;\n}\n\nfunction getInt16( view, dataArray, littleEndian ){\n    var dv = new DataView( view.buffer );\n    var o = view.byteOffset;\n    var n = view.byteLength;\n    if( !dataArray ) dataArray = new Int16Array( n / 2 );\n    for( var i = 0, il = n / 2; i < il; ++i ){\n        dataArray[ i ] = dv.getInt16( o + i * 2, littleEndian );\n    }\n    return dataArray;\n}\n\nfunction getInt32( view, dataArray, littleEndian ){\n    var dv = new DataView( view.buffer );\n    var o = view.byteOffset;\n    var n = view.byteLength;\n    if( !dataArray ) dataArray = new Int32Array( n / 4 );\n    for( var i = 0, il = n / 4; i < il; ++i ){\n        dataArray[ i ] = dv.getInt32( o + i * 4, littleEndian );\n    }\n    return dataArray;\n}\n\nfunction decodeFloat( intArray, divisor, dataArray ){\n    var n = intArray.length;\n    var invDiv = 1/divisor;\n    if( !dataArray ) dataArray = new Float32Array( n );\n    for( var i = 0; i < n; ++i ){\n        dataArray[ i ] = intArray[ i ] * invDiv;\n    }\n    return dataArray;\n}\n\nfunction decodeRunLength( array, dataArray ){\n    var i, il;\n    if( !dataArray ){\n        var fullLength = 0;\n        for( i = 0, il = array.length; i < il; i+=2 ){\n            fullLength += array[ i + 1 ];\n        }\n        dataArray = new array.constructor( fullLength );\n    }\n    var dataOffset = 0;\n    for( i = 0, il = array.length; i < il; i+=2 ){\n        var value = array[ i ];\n        var length = array[ i + 1 ];\n        for( var j = 0; j < length; ++j ){\n            dataArray[ dataOffset ] = value;\n            dataOffset += 1;\n        }\n    }\n    return dataArray;\n}\n\nfunction decodeDelta( dataArray ){\n    for( var i = 1, il = dataArray.length; i < il; ++i ){\n        dataArray[ i ] += dataArray[ i - 1 ];\n    }\n    return dataArray;\n}\n\nfunction getInt32View( dataArray ){\n    return new Int32Array(\n        dataArray.buffer, dataArray.byteOffset, dataArray.byteLength/4\n    );\n}\n\nfunction decodeSplitListDelta( bigArray, smallArray, dataArray ){\n    var fullLength = ( bigArray.length / 2 ) + smallArray.length;\n    if( !dataArray ) dataArray = new Int32Array( fullLength );\n    var dataOffset = 0;\n    var smallOffset = 0;\n    for( var i = 0, il = bigArray.length; i < il; i+=2 ){\n        var value = bigArray[ i ];\n        var length = bigArray[ i + 1 ];\n        dataArray[ dataOffset ] = value;\n        if( i !== 0 ){\n            dataArray[ dataOffset ] += dataArray[ dataOffset - 1 ];\n        }\n        dataOffset += 1;\n        for( var j = 0; j < length; ++j ){\n            dataArray[ dataOffset ] = dataArray[ dataOffset - 1 ] + smallArray[ smallOffset ];\n            dataOffset += 1;\n            smallOffset += 1;\n        }\n    }\n    return dataArray;\n}\n\nfunction decodeFloatSplitList( bigArray, smallArray, divisor, dataArray, littleEndian ){\n    var int32View = dataArray ? getInt32View( dataArray ) : undefined;\n    var int32 = decodeSplitListDelta(\n        getInt32( bigArray, undefined, littleEndian ),\n        getInt16( smallArray, undefined, littleEndian ),\n        int32View\n    );\n    return decodeFloat( int32, divisor, dataArray );\n}\n\nfunction decodeFloatRunLength( array, divisor, dataArray, littleEndian ){\n    var int32View = dataArray ? getInt32View( dataArray ) : undefined;\n    var int32 = decodeRunLength( getInt32( array, undefined, littleEndian ), int32View )\n    return decodeFloat( int32, divisor, dataArray );\n}\n\n//\n\nfunction decodeMmtf( binOrDict ){\n\n    // make sure binOrDict is not a plain Arraybuffer\n    if( binOrDict instanceof ArrayBuffer ){\n        binOrDict = new Uint8Array( binOrDict );\n    }\n\n    var raw;\n    if( binOrDict instanceof Uint8Array ){\n        // get raw dict from msgpack\n        raw = decodeMsgpack( binOrDict );\n    }else{\n        // already raw dict\n        raw = binOrDict;\n    }\n\n    // console.log( getInt32( raw.resOrder ) )\n    // console.log( raw )\n\n    // hoisted loop variables\n    var i, il, j, jl, k, kl;\n\n    // counts\n    var numBonds = raw.numBonds || 0;\n    var numAtoms = raw.numAtoms || 0;\n    var numGroups = raw.groupTypeList.length / 4;\n    var numChains = raw.chainList.length / 4;\n    var numModels = raw.chainsPerModel.length;\n\n    // maps\n    var groupMap = raw.groupMap;\n\n    // bondStore\n    var bAtomIndex1 = new Uint32Array( numBonds + numGroups );  // add numGroups\n    var bAtomIndex2 = new Uint32Array( numBonds + numGroups );  // to have space\n    var bBondOrder = new Uint8Array( numBonds + numGroups );    // for polymer bonds\n\n    // atomStore\n    var aGroupIndex = new Uint32Array( numAtoms );\n    var aXcoord = new Float32Array( numAtoms );\n    var aYcoord = new Float32Array( numAtoms );\n    var aZcoord = new Float32Array( numAtoms );\n    var aBfactor = new Float32Array( numAtoms );\n    var aAtomId = new Int32Array( numAtoms );\n    var aAltLabel = new Uint8Array( numAtoms );\n    var aInsCode = new Uint8Array( numAtoms );\n    var aOccupancy = new Float32Array( numAtoms );\n\n    // groupStore\n    var gChainIndex = new Uint32Array( numGroups );\n    var gAtomOffset = new Uint32Array( numGroups );\n    var gAtomCount = new Uint16Array( numGroups );\n    var gGroupTypeId = new Uint16Array( numGroups );\n    var gGroupNum = new Int32Array( numGroups );\n    var gSecStruct = new Uint8Array( numGroups );\n\n    // chainStore\n    var cModelIndex = new Uint16Array( numChains );\n    var cGroupOffset = new Uint32Array( numChains );\n    var cGroupCount = new Uint32Array( numChains );\n    var cChainName = new Uint8Array( 4 * numChains );\n\n    // modelStore\n    var mChainOffset = new Uint32Array( numModels );\n    var mChainCount = new Uint32Array( numModels );\n\n    // split-list delta & integer decode x, y, z coords\n    decodeFloatSplitList( raw.xCoordBig, raw.xCoordSmall, 1000, aXcoord );\n    decodeFloatSplitList( raw.yCoordBig, raw.yCoordSmall, 1000, aYcoord );\n    decodeFloatSplitList( raw.zCoordBig, raw.zCoordSmall, 1000, aZcoord );\n\n    // split-list delta & integer decode b-factors\n    if( raw.bFactorBig && raw.bFactorSmall ){\n        decodeFloatSplitList( raw.bFactorBig, raw.bFactorSmall, 100, aBfactor );\n    }\n\n    // delta & run-length decode atom ids\n    if( raw.atomIdList ){\n        decodeDelta( decodeRunLength( getInt32( raw.atomIdList ), aAtomId ) );\n    }\n\n    // run-length decode altternate labels\n    if( raw.altLabelList ){\n        var rawAltLabelList = raw.altLabelList;\n        for( i = 0, il = rawAltLabelList.length; i < il; i+=2 ){\n            var value = rawAltLabelList[ i ];\n            if( value === \"?\" ){\n                rawAltLabelList[ i ] = 0;\n            }else{\n                rawAltLabelList[ i ] = rawAltLabelList[ i ].charCodeAt( 0 );\n            }\n            rawAltLabelList[ i + 1 ] = parseInt( rawAltLabelList[ i + 1 ] );\n        }\n        decodeRunLength( rawAltLabelList, aAltLabel );\n    }\n\n    // run-length decode insertion codes\n    if( raw.insCodeList ){\n        var rawInsCodeList = raw.insCodeList;\n        for( i = 0, il = rawInsCodeList.length; i < il; i+=2 ){\n            var value = rawInsCodeList[ i ];\n            if( value === null ){\n                rawInsCodeList[ i ] = 0;\n            }else{\n                rawInsCodeList[ i ] = rawInsCodeList[ i ].charCodeAt( 0 );\n            }\n            rawInsCodeList[ i + 1 ] = parseInt( rawInsCodeList[ i + 1 ] );\n        }\n        decodeRunLength( rawInsCodeList, aInsCode );\n    }\n\n    // run-length & integer decode occupancies\n    if( raw.occList ){\n        decodeFloatRunLength( raw.occList, 100, aOccupancy );\n    }\n\n    // get ascii encoded chain names\n    getInt8( raw.chainList, cChainName );\n\n    // set-up model-chain relations\n    var chainsPerModel = raw.chainsPerModel;\n    var modelChainCount;\n    var chainOffset = 0;\n    for( i = 0; i < numModels; ++i ){\n        modelChainCount = chainsPerModel[ i ];\n        mChainOffset[ i ] = chainOffset;\n        mChainCount[ i ] = modelChainCount;\n        for( j = 0; j < modelChainCount; ++j ){\n            cModelIndex[ j + chainOffset ] = i;\n        }\n        chainOffset += modelChainCount;\n    }\n\n    // set-up chain-residue relations\n    var groupsPerChain = raw.groupsPerChain;\n    var chainGroupCount;\n    var groupOffset = 0;\n    for( i = 0; i < numChains; ++i ){\n        chainGroupCount = groupsPerChain[ i ];\n        cGroupOffset[ i ] = groupOffset;\n        cGroupCount[ i ] = chainGroupCount;\n        for( j = 0; j < chainGroupCount; ++j ){\n            gChainIndex[ j + groupOffset ] = i;\n        }\n        groupOffset += chainGroupCount;\n    }\n\n    // run-length & delta decode group numbers\n    decodeDelta( decodeRunLength( getInt32( raw.groupNumList ), gGroupNum ) );\n\n    // get group type pointers\n    getInt32( raw.groupTypeList, gGroupTypeId );\n\n    // get secondary structure codes\n    getInt8( raw.secStructList, gSecStruct );\n\n    //////\n    // get data from group map\n\n    var atomOffset = 0;\n    var bondOffset = 0;\n\n    for( i = 0; i < numGroups; ++i ){\n\n        var groupData = groupMap[ gGroupTypeId[ i ] ];\n        var atomInfo = groupData.atomInfo;\n        var groupAtomCount = atomInfo.length / 2;\n\n        var bondIndices = groupData.bondIndices;\n        var bondOrders = groupData.bondOrders;\n\n        for( j = 0, jl = bondOrders.length; j < jl; ++j ){\n            bAtomIndex1[ bondOffset ] = atomOffset + bondIndices[ j * 2 ];\n            bAtomIndex2[ bondOffset ] = atomOffset + bondIndices[ j * 2 + 1 ];\n            bBondOrder[ bondOffset ] = bondOrders[ j ];\n            bondOffset += 1;\n        }\n\n        //\n\n        gAtomOffset[ i ] = atomOffset;\n        gAtomCount[ i ] = groupAtomCount;\n\n        for( j = 0; j < groupAtomCount; ++j ){\n            aGroupIndex[ atomOffset ] = i;\n            atomOffset += 1;\n        }\n\n    }\n\n    if( raw.bondAtomList ){\n\n        // console.log( getInt32( raw.bondAtomList ) );\n\n        if( raw.bondOrderList ){\n            var bondOrderList =  raw.bondOrderList;\n            bBondOrder.set( bondOrderList, bondOffset );\n        }\n\n        var bondAtomList = getInt32( raw.bondAtomList );\n        for( i = 0, il = bondAtomList.length; i < il; i += 2 ){\n            bAtomIndex1[ bondOffset ] = bondAtomList[ i ];\n            bAtomIndex2[ bondOffset ] = bondAtomList[ i + 1 ];\n            bondOffset += 1;\n        }\n\n    }\n\n    return {\n        bondStore: {\n            atomIndex1: bAtomIndex1,\n            atomIndex2: bAtomIndex2,\n            bondOrder: bBondOrder,\n        },\n        atomStore: {\n            groupIndex: aGroupIndex,\n            xCoord: aXcoord,\n            yCoord: aYcoord,\n            zCoord: aZcoord,\n            bFactor: aBfactor,\n            atomId: aAtomId,\n            altLabel: aAltLabel,\n            insCode: aInsCode,\n            occupancy: aOccupancy\n        },\n        groupStore: {\n            chainIndex: gChainIndex,\n            atomOffset: gAtomOffset,\n            atomCount: gAtomCount,\n            groupTypeId: gGroupTypeId,\n            groupNum: gGroupNum,\n            secStruct: gSecStruct\n        },\n        chainStore: {\n            modelIndex: cModelIndex,\n            groupOffset: cGroupOffset,\n            groupCount: cGroupCount,\n            chainName: cChainName\n        },\n        modelStore: {\n            chainOffset: mChainOffset,\n            chainCount: mChainCount\n        },\n\n        groupMap: groupMap,\n\n        unitCell: raw.unitCell,\n        spaceGroup: raw.spaceGroup,\n        bioAssembly: raw.bioAssembly,\n        pdbId: raw.pdbId,\n        title: raw.title,\n\n        numBonds: numBonds,\n        numAtoms: numAtoms,\n        numGroups: numGroups,\n        numChains: numChains,\n        numModels: numModels\n    };\n\n}\n\nexport default decodeMmtf;\n"],"names":[],"mappings":"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","sourceRoot":"/source/"}